//
// Generated by Bluespec Compiler, version 2009.10.B (build 18070, 2009-10-11)
//
// On Thu Nov 19 16:39:10 BRST 2009
//
// Method conflict info:
// Method: pegar_valor
// Conflict-free: pegar_valor
//
//
// Ports:
// Name                         I/O  size props
// pegar_valor                    O    32 reg
// RDY_pegar_valor                O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
`define BSV_ASSIGNMENT_DELAY
`endif

module mkInnerProduct(CLK,
		      RST_N,

		      pegar_valor,
		      RDY_pegar_valor);
  input  CLK;
  input  RST_N;

  // value method pegar_valor
  output [31 : 0] pegar_valor;
  output RDY_pegar_valor;

  // signals for module outputs
  wire [31 : 0] pegar_valor;
  wire RDY_pegar_valor;

  // inlined wires
  wire ramA_serverAdapterA_outData_deqCalled$whas,
       ramA_serverAdapterA_outData_enqData$whas,
       ramA_serverAdapterA_outData_outData$whas,
       ramA_serverAdapterB_outData_enqData$whas,
       ramA_serverAdapterB_outData_outData$whas,
       ramB_serverAdapterA_outData_enqData$whas,
       ramB_serverAdapterA_outData_outData$whas,
       ramB_serverAdapterB_outData_enqData$whas,
       ramB_serverAdapterB_outData_outData$whas;

  // register current_addr
  reg [10 : 0] current_addr;
  wire [10 : 0] current_addr$D_IN;
  wire current_addr$EN;

  // register ramA_serverAdapterA_cnt
  reg [2 : 0] ramA_serverAdapterA_cnt;
  wire [2 : 0] ramA_serverAdapterA_cnt$D_IN;
  wire ramA_serverAdapterA_cnt$EN;

  // register ramA_serverAdapterA_s1
  reg [1 : 0] ramA_serverAdapterA_s1;
  wire [1 : 0] ramA_serverAdapterA_s1$D_IN;
  wire ramA_serverAdapterA_s1$EN;

  // register ramA_serverAdapterB_cnt
  reg [2 : 0] ramA_serverAdapterB_cnt;
  wire [2 : 0] ramA_serverAdapterB_cnt$D_IN;
  wire ramA_serverAdapterB_cnt$EN;

  // register ramA_serverAdapterB_s1
  reg [1 : 0] ramA_serverAdapterB_s1;
  wire [1 : 0] ramA_serverAdapterB_s1$D_IN;
  wire ramA_serverAdapterB_s1$EN;

  // register ramB_serverAdapterA_cnt
  reg [2 : 0] ramB_serverAdapterA_cnt;
  wire [2 : 0] ramB_serverAdapterA_cnt$D_IN;
  wire ramB_serverAdapterA_cnt$EN;

  // register ramB_serverAdapterA_s1
  reg [1 : 0] ramB_serverAdapterA_s1;
  wire [1 : 0] ramB_serverAdapterA_s1$D_IN;
  wire ramB_serverAdapterA_s1$EN;

  // register ramB_serverAdapterB_cnt
  reg [2 : 0] ramB_serverAdapterB_cnt;
  wire [2 : 0] ramB_serverAdapterB_cnt$D_IN;
  wire ramB_serverAdapterB_cnt$EN;

  // register ramB_serverAdapterB_s1
  reg [1 : 0] ramB_serverAdapterB_s1;
  wire [1 : 0] ramB_serverAdapterB_s1$D_IN;
  wire ramB_serverAdapterB_s1$EN;

  // register valor
  reg [31 : 0] valor;
  wire [31 : 0] valor$D_IN;
  wire valor$EN;

  // ports of submodule ramA_memory
  wire [31 : 0] ramA_memory$DIA,
		ramA_memory$DIB,
		ramA_memory$DOA,
		ramA_memory$DOB;
  wire [10 : 0] ramA_memory$ADDRA, ramA_memory$ADDRB;
  wire ramA_memory$ENA, ramA_memory$ENB, ramA_memory$WEA, ramA_memory$WEB;

  // ports of submodule ramA_serverAdapterA_outDataCore
  wire [31 : 0] ramA_serverAdapterA_outDataCore$D_IN,
		ramA_serverAdapterA_outDataCore$D_OUT;
  wire ramA_serverAdapterA_outDataCore$CLR,
       ramA_serverAdapterA_outDataCore$DEQ,
       ramA_serverAdapterA_outDataCore$EMPTY_N,
       ramA_serverAdapterA_outDataCore$ENQ,
       ramA_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule ramA_serverAdapterB_outDataCore
  wire [31 : 0] ramA_serverAdapterB_outDataCore$D_IN,
		ramA_serverAdapterB_outDataCore$D_OUT;
  wire ramA_serverAdapterB_outDataCore$CLR,
       ramA_serverAdapterB_outDataCore$DEQ,
       ramA_serverAdapterB_outDataCore$EMPTY_N,
       ramA_serverAdapterB_outDataCore$ENQ,
       ramA_serverAdapterB_outDataCore$FULL_N;

  // ports of submodule ramB_memory
  wire [31 : 0] ramB_memory$DIA,
		ramB_memory$DIB,
		ramB_memory$DOA,
		ramB_memory$DOB;
  wire [10 : 0] ramB_memory$ADDRA, ramB_memory$ADDRB;
  wire ramB_memory$ENA, ramB_memory$ENB, ramB_memory$WEA, ramB_memory$WEB;

  // ports of submodule ramB_serverAdapterA_outDataCore
  wire [31 : 0] ramB_serverAdapterA_outDataCore$D_IN,
		ramB_serverAdapterA_outDataCore$D_OUT;
  wire ramB_serverAdapterA_outDataCore$CLR,
       ramB_serverAdapterA_outDataCore$DEQ,
       ramB_serverAdapterA_outDataCore$EMPTY_N,
       ramB_serverAdapterA_outDataCore$ENQ,
       ramB_serverAdapterA_outDataCore$FULL_N;

  // ports of submodule ramB_serverAdapterB_outDataCore
  wire [31 : 0] ramB_serverAdapterB_outDataCore$D_IN,
		ramB_serverAdapterB_outDataCore$D_OUT;
  wire ramB_serverAdapterB_outDataCore$CLR,
       ramB_serverAdapterB_outDataCore$DEQ,
       ramB_serverAdapterB_outDataCore$EMPTY_N,
       ramB_serverAdapterB_outDataCore$ENQ,
       ramB_serverAdapterB_outDataCore$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_ramA_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_ramA_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_ramA_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_ramA_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_ramB_serverAdapterA_outData_enqAndDeq,
       WILL_FIRE_RL_ramB_serverAdapterA_outData_setFirstEnq,
       WILL_FIRE_RL_ramB_serverAdapterB_outData_enqAndDeq,
       WILL_FIRE_RL_ramB_serverAdapterB_outData_setFirstEnq,
       WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways;

  // remaining internal signals
  wire [63 : 0] ramA_serverAdapterA_outData_outData_wget__5_MU_ETC___d27,
		ramA_serverAdapterB_outData_outData_wget__9_MU_ETC___d31;
  wire [31 : 0] v__h6084, v__h6184, v__h6286, v__h6388, y__h6507;
  wire [2 : 0] ramA_serverAdapterA_cnt_5_PLUS_IF_ramA_serverA_ETC___d249,
	       ramA_serverAdapterB_cnt_7_PLUS_IF_ramA_serverA_ETC___d195,
	       ramB_serverAdapterA_cnt_9_PLUS_IF_ramB_serverA_ETC___d141,
	       ramB_serverAdapterB_cnt_1_PLUS_IF_ramB_serverA_ETC___d87;
  wire ramA_serverAdapterB_outData_outData_whas_AND_r_ETC___d20;

  // value method pegar_valor
  assign pegar_valor = valor ;
  assign RDY_pegar_valor = current_addr == 11'd2047 ;

  // submodule ramA_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ramA_memory(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(ramA_memory$ADDRA),
					  .ADDRB(ramA_memory$ADDRB),
					  .DIA(ramA_memory$DIA),
					  .DIB(ramA_memory$DIB),
					  .WEA(ramA_memory$WEA),
					  .WEB(ramA_memory$WEB),
					  .ENA(ramA_memory$ENA),
					  .ENB(ramA_memory$ENB),
					  .DOA(ramA_memory$DOA),
					  .DOB(ramA_memory$DOB));

  // submodule ramA_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ramA_serverAdapterA_outDataCore(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(ramA_serverAdapterA_outDataCore$D_IN),
							       .ENQ(ramA_serverAdapterA_outDataCore$ENQ),
							       .DEQ(ramA_serverAdapterA_outDataCore$DEQ),
							       .CLR(ramA_serverAdapterA_outDataCore$CLR),
							       .D_OUT(ramA_serverAdapterA_outDataCore$D_OUT),
							       .FULL_N(ramA_serverAdapterA_outDataCore$FULL_N),
							       .EMPTY_N(ramA_serverAdapterA_outDataCore$EMPTY_N));

  // submodule ramA_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ramA_serverAdapterB_outDataCore(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(ramA_serverAdapterB_outDataCore$D_IN),
							       .ENQ(ramA_serverAdapterB_outDataCore$ENQ),
							       .DEQ(ramA_serverAdapterB_outDataCore$DEQ),
							       .CLR(ramA_serverAdapterB_outDataCore$CLR),
							       .D_OUT(ramA_serverAdapterB_outDataCore$D_OUT),
							       .FULL_N(ramA_serverAdapterB_outDataCore$FULL_N),
							       .EMPTY_N(ramA_serverAdapterB_outDataCore$EMPTY_N));

  // submodule ramB_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd11),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(12'd2048)) ramB_memory(.CLKA(CLK),
					  .CLKB(CLK),
					  .ADDRA(ramB_memory$ADDRA),
					  .ADDRB(ramB_memory$ADDRB),
					  .DIA(ramB_memory$DIA),
					  .DIB(ramB_memory$DIB),
					  .WEA(ramB_memory$WEA),
					  .WEB(ramB_memory$WEB),
					  .ENA(ramB_memory$ENA),
					  .ENB(ramB_memory$ENB),
					  .DOA(ramB_memory$DOA),
					  .DOB(ramB_memory$DOB));

  // submodule ramB_serverAdapterA_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ramB_serverAdapterA_outDataCore(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(ramB_serverAdapterA_outDataCore$D_IN),
							       .ENQ(ramB_serverAdapterA_outDataCore$ENQ),
							       .DEQ(ramB_serverAdapterA_outDataCore$DEQ),
							       .CLR(ramB_serverAdapterA_outDataCore$CLR),
							       .D_OUT(ramB_serverAdapterA_outDataCore$D_OUT),
							       .FULL_N(ramB_serverAdapterA_outDataCore$FULL_N),
							       .EMPTY_N(ramB_serverAdapterA_outDataCore$EMPTY_N));

  // submodule ramB_serverAdapterB_outDataCore
  SizedFIFO #(.p1width(32'd32),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) ramB_serverAdapterB_outDataCore(.RST_N(RST_N),
							       .CLK(CLK),
							       .D_IN(ramB_serverAdapterB_outDataCore$D_IN),
							       .ENQ(ramB_serverAdapterB_outDataCore$ENQ),
							       .DEQ(ramB_serverAdapterB_outDataCore$DEQ),
							       .CLR(ramB_serverAdapterB_outDataCore$CLR),
							       .D_OUT(ramB_serverAdapterB_outDataCore$D_OUT),
							       .FULL_N(ramB_serverAdapterB_outDataCore$FULL_N),
							       .EMPTY_N(ramB_serverAdapterB_outDataCore$EMPTY_N));

  // rule RL_ramB_serverAdapterB_stageReadResponseAlways
  assign WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways =
	     (ramA_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (ramA_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     (ramB_serverAdapterA_cnt ^ 3'h4) < 3'd7 &&
	     (ramB_serverAdapterB_cnt ^ 3'h4) < 3'd7 &&
	     current_addr != 11'd2047 ;

  // rule RL_ramB_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_ramB_serverAdapterB_outData_setFirstEnq =
	     !ramB_serverAdapterB_outDataCore$EMPTY_N &&
	     ramB_serverAdapterB_outData_enqData$whas ;

  // rule RL_ramB_serverAdapterA_outData_setFirstEnq
  assign WILL_FIRE_RL_ramB_serverAdapterA_outData_setFirstEnq =
	     !ramB_serverAdapterA_outDataCore$EMPTY_N &&
	     ramB_serverAdapterA_outData_enqData$whas ;

  // rule RL_ramA_serverAdapterB_outData_setFirstEnq
  assign WILL_FIRE_RL_ramA_serverAdapterB_outData_setFirstEnq =
	     !ramA_serverAdapterB_outDataCore$EMPTY_N &&
	     ramA_serverAdapterB_outData_enqData$whas ;

  // rule RL_ramA_serverAdapterA_outData_setFirstEnq
  assign WILL_FIRE_RL_ramA_serverAdapterA_outData_setFirstEnq =
	     !ramA_serverAdapterA_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_enqData$whas ;

  // rule RL_ramB_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_ramB_serverAdapterB_outData_enqAndDeq =
	     ramB_serverAdapterB_outDataCore$FULL_N &&
	     ramB_serverAdapterB_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramB_serverAdapterB_outData_enqData$whas ;

  // rule RL_ramB_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_ramB_serverAdapterA_outData_enqAndDeq =
	     ramB_serverAdapterA_outDataCore$FULL_N &&
	     ramB_serverAdapterA_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramB_serverAdapterA_outData_enqData$whas ;

  // rule RL_ramA_serverAdapterB_outData_enqAndDeq
  assign WILL_FIRE_RL_ramA_serverAdapterB_outData_enqAndDeq =
	     ramA_serverAdapterB_outDataCore$FULL_N &&
	     ramA_serverAdapterB_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramA_serverAdapterB_outData_enqData$whas ;

  // rule RL_ramA_serverAdapterA_outData_enqAndDeq
  assign WILL_FIRE_RL_ramA_serverAdapterA_outData_enqAndDeq =
	     ramA_serverAdapterA_outDataCore$FULL_N &&
	     ramA_serverAdapterA_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramA_serverAdapterA_outData_enqData$whas ;

  // inlined wires
  assign ramA_serverAdapterA_outData_enqData$whas =
	     ramA_serverAdapterA_outDataCore$FULL_N &&
	     ramA_serverAdapterA_s1[1] &&
	     ramA_serverAdapterA_s1[0] ;
  assign ramA_serverAdapterA_outData_outData$whas =
	     WILL_FIRE_RL_ramA_serverAdapterA_outData_setFirstEnq ||
	     ramA_serverAdapterA_outDataCore$EMPTY_N ;
  assign ramA_serverAdapterB_outData_enqData$whas =
	     ramA_serverAdapterB_outDataCore$FULL_N &&
	     ramA_serverAdapterB_s1[1] &&
	     ramA_serverAdapterB_s1[0] ;
  assign ramA_serverAdapterB_outData_outData$whas =
	     WILL_FIRE_RL_ramA_serverAdapterB_outData_setFirstEnq ||
	     ramA_serverAdapterB_outDataCore$EMPTY_N ;
  assign ramB_serverAdapterA_outData_enqData$whas =
	     ramB_serverAdapterA_outDataCore$FULL_N &&
	     ramB_serverAdapterA_s1[1] &&
	     ramB_serverAdapterA_s1[0] ;
  assign ramB_serverAdapterA_outData_outData$whas =
	     WILL_FIRE_RL_ramB_serverAdapterA_outData_setFirstEnq ||
	     ramB_serverAdapterA_outDataCore$EMPTY_N ;
  assign ramB_serverAdapterB_outData_enqData$whas =
	     ramB_serverAdapterB_outDataCore$FULL_N &&
	     ramB_serverAdapterB_s1[1] &&
	     ramB_serverAdapterB_s1[0] ;
  assign ramB_serverAdapterB_outData_outData$whas =
	     WILL_FIRE_RL_ramB_serverAdapterB_outData_setFirstEnq ||
	     ramB_serverAdapterB_outDataCore$EMPTY_N ;
  assign ramA_serverAdapterA_outData_deqCalled$whas =
	     (ramA_serverAdapterA_outDataCore$EMPTY_N ||
	      ramA_serverAdapterA_outData_enqData$whas) &&
	     ramA_serverAdapterA_outData_outData$whas &&
	     (ramA_serverAdapterB_outDataCore$EMPTY_N ||
	      ramA_serverAdapterB_outData_enqData$whas) &&
	     ramA_serverAdapterB_outData_outData_whas_AND_r_ETC___d20 ;

  // register current_addr
  assign current_addr$D_IN = current_addr + 11'd2 ;
  assign current_addr$EN =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ;

  // register ramA_serverAdapterA_cnt
  assign ramA_serverAdapterA_cnt$D_IN =
	     ramA_serverAdapterA_cnt_5_PLUS_IF_ramA_serverA_ETC___d249 ;
  assign ramA_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ||
	     ramA_serverAdapterA_outData_deqCalled$whas ;

  // register ramA_serverAdapterA_s1
  assign ramA_serverAdapterA_s1$D_IN =
	     { WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign ramA_serverAdapterA_s1$EN = 1'd1 ;

  // register ramA_serverAdapterB_cnt
  assign ramA_serverAdapterB_cnt$D_IN =
	     ramA_serverAdapterB_cnt_7_PLUS_IF_ramA_serverA_ETC___d195 ;
  assign ramA_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ||
	     ramA_serverAdapterA_outData_deqCalled$whas ;

  // register ramA_serverAdapterB_s1
  assign ramA_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign ramA_serverAdapterB_s1$EN = 1'd1 ;

  // register ramB_serverAdapterA_cnt
  assign ramB_serverAdapterA_cnt$D_IN =
	     ramB_serverAdapterA_cnt_9_PLUS_IF_ramB_serverA_ETC___d141 ;
  assign ramB_serverAdapterA_cnt$EN =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ||
	     ramA_serverAdapterA_outData_deqCalled$whas ;

  // register ramB_serverAdapterA_s1
  assign ramB_serverAdapterA_s1$D_IN =
	     { WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign ramB_serverAdapterA_s1$EN = 1'd1 ;

  // register ramB_serverAdapterB_cnt
  assign ramB_serverAdapterB_cnt$D_IN =
	     ramB_serverAdapterB_cnt_1_PLUS_IF_ramB_serverA_ETC___d87 ;
  assign ramB_serverAdapterB_cnt$EN =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ||
	     ramA_serverAdapterA_outData_deqCalled$whas ;

  // register ramB_serverAdapterB_s1
  assign ramB_serverAdapterB_s1$D_IN =
	     { WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways,
	       1'b1 } ;
  assign ramB_serverAdapterB_s1$EN = 1'd1 ;

  // register valor
  assign valor$D_IN = valor + y__h6507 ;
  assign valor$EN = ramA_serverAdapterA_outData_deqCalled$whas ;

  // submodule ramA_memory
  assign ramA_memory$WEA = 1'd0 ;
  assign ramA_memory$ADDRA = current_addr ;
  assign ramA_memory$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign ramA_memory$WEB = 1'd0 ;
  assign ramA_memory$DIB = 32'hAAAAAAAA /* unspecified value */  ;
  assign ramA_memory$ADDRB = current_addr + 11'd1 ;
  assign ramA_memory$ENA =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ;
  assign ramA_memory$ENB =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ;

  // submodule ramA_serverAdapterA_outDataCore
  assign ramA_serverAdapterA_outDataCore$D_IN = ramA_memory$DOA ;
  assign ramA_serverAdapterA_outDataCore$DEQ =
	     ramA_serverAdapterA_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     !ramA_serverAdapterA_outData_enqData$whas ||
	     WILL_FIRE_RL_ramA_serverAdapterA_outData_enqAndDeq ;
  assign ramA_serverAdapterA_outDataCore$ENQ =
	     ramA_serverAdapterA_outDataCore$FULL_N &&
	     !ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramA_serverAdapterA_outData_enqData$whas ||
	     WILL_FIRE_RL_ramA_serverAdapterA_outData_enqAndDeq ;
  assign ramA_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule ramA_serverAdapterB_outDataCore
  assign ramA_serverAdapterB_outDataCore$D_IN = ramA_memory$DOB ;
  assign ramA_serverAdapterB_outDataCore$DEQ =
	     ramA_serverAdapterB_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     !ramA_serverAdapterB_outData_enqData$whas ||
	     WILL_FIRE_RL_ramA_serverAdapterB_outData_enqAndDeq ;
  assign ramA_serverAdapterB_outDataCore$ENQ =
	     ramA_serverAdapterB_outDataCore$FULL_N &&
	     !ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramA_serverAdapterB_outData_enqData$whas ||
	     WILL_FIRE_RL_ramA_serverAdapterB_outData_enqAndDeq ;
  assign ramA_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // submodule ramB_memory
  assign ramB_memory$WEA = 1'd0 ;
  assign ramB_memory$DIA = 32'hAAAAAAAA /* unspecified value */  ;
  assign ramB_memory$ADDRA = current_addr ;
  assign ramB_memory$WEB = 1'd0 ;
  assign ramB_memory$ADDRB = current_addr + 11'd1 ;
  assign ramB_memory$DIB = 32'hAAAAAAAA /* unspecified value */  ;
  assign ramB_memory$ENA =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ;
  assign ramB_memory$ENB =
	     WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ;

  // submodule ramB_serverAdapterA_outDataCore
  assign ramB_serverAdapterA_outDataCore$D_IN = ramB_memory$DOA ;
  assign ramB_serverAdapterA_outDataCore$DEQ =
	     ramB_serverAdapterA_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     !ramB_serverAdapterA_outData_enqData$whas ||
	     WILL_FIRE_RL_ramB_serverAdapterA_outData_enqAndDeq ;
  assign ramB_serverAdapterA_outDataCore$ENQ =
	     ramB_serverAdapterA_outDataCore$FULL_N &&
	     !ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramB_serverAdapterA_outData_enqData$whas ||
	     WILL_FIRE_RL_ramB_serverAdapterA_outData_enqAndDeq ;
  assign ramB_serverAdapterA_outDataCore$CLR = 1'b0 ;

  // submodule ramB_serverAdapterB_outDataCore
  assign ramB_serverAdapterB_outDataCore$D_IN = ramB_memory$DOB ;
  assign ramB_serverAdapterB_outDataCore$ENQ =
	     ramB_serverAdapterB_outDataCore$FULL_N &&
	     !ramA_serverAdapterA_outData_deqCalled$whas &&
	     ramB_serverAdapterB_outData_enqData$whas ||
	     WILL_FIRE_RL_ramB_serverAdapterB_outData_enqAndDeq ;
  assign ramB_serverAdapterB_outDataCore$DEQ =
	     ramB_serverAdapterB_outDataCore$EMPTY_N &&
	     ramA_serverAdapterA_outData_deqCalled$whas &&
	     !ramB_serverAdapterB_outData_enqData$whas ||
	     WILL_FIRE_RL_ramB_serverAdapterB_outData_enqAndDeq ;
  assign ramB_serverAdapterB_outDataCore$CLR = 1'b0 ;

  // remaining internal signals
  assign ramA_serverAdapterA_cnt_5_PLUS_IF_ramA_serverA_ETC___d249 =
	     ramA_serverAdapterA_cnt +
	     (WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (ramA_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign ramA_serverAdapterA_outData_outData_wget__5_MU_ETC___d27 =
	     v__h6084 * v__h6286 ;
  assign ramA_serverAdapterB_cnt_7_PLUS_IF_ramA_serverA_ETC___d195 =
	     ramA_serverAdapterB_cnt +
	     (WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (ramA_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign ramA_serverAdapterB_outData_outData_wget__9_MU_ETC___d31 =
	     v__h6184 * v__h6388 ;
  assign ramA_serverAdapterB_outData_outData_whas_AND_r_ETC___d20 =
	     ramA_serverAdapterB_outData_outData$whas &&
	     (ramB_serverAdapterA_outDataCore$EMPTY_N ||
	      ramB_serverAdapterA_outData_enqData$whas) &&
	     ramB_serverAdapterA_outData_outData$whas &&
	     (ramB_serverAdapterB_outDataCore$EMPTY_N ||
	      ramB_serverAdapterB_outData_enqData$whas) &&
	     ramB_serverAdapterB_outData_outData$whas ;
  assign ramB_serverAdapterA_cnt_9_PLUS_IF_ramB_serverA_ETC___d141 =
	     ramB_serverAdapterA_cnt +
	     (WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (ramA_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign ramB_serverAdapterB_cnt_1_PLUS_IF_ramB_serverA_ETC___d87 =
	     ramB_serverAdapterB_cnt +
	     (WILL_FIRE_RL_ramB_serverAdapterB_stageReadResponseAlways ?
		3'd1 :
		3'd0) +
	     (ramA_serverAdapterA_outData_deqCalled$whas ? 3'd7 : 3'd0) ;
  assign v__h6084 =
	     WILL_FIRE_RL_ramA_serverAdapterA_outData_setFirstEnq ?
	       ramA_memory$DOA :
	       ramA_serverAdapterA_outDataCore$D_OUT ;
  assign v__h6184 =
	     WILL_FIRE_RL_ramA_serverAdapterB_outData_setFirstEnq ?
	       ramA_memory$DOB :
	       ramA_serverAdapterB_outDataCore$D_OUT ;
  assign v__h6286 =
	     WILL_FIRE_RL_ramB_serverAdapterA_outData_setFirstEnq ?
	       ramB_memory$DOA :
	       ramB_serverAdapterA_outDataCore$D_OUT ;
  assign v__h6388 =
	     WILL_FIRE_RL_ramB_serverAdapterB_outData_setFirstEnq ?
	       ramB_memory$DOB :
	       ramB_serverAdapterB_outDataCore$D_OUT ;
  assign y__h6507 =
	     ramA_serverAdapterA_outData_outData_wget__5_MU_ETC___d27[31:0] +
	     ramA_serverAdapterB_outData_outData_wget__9_MU_ETC___d31[31:0] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (!RST_N)
      begin
        current_addr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	ramA_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ramA_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ramA_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ramA_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ramB_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ramB_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	ramB_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	ramB_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	valor <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (current_addr$EN)
	  current_addr <= `BSV_ASSIGNMENT_DELAY current_addr$D_IN;
	if (ramA_serverAdapterA_cnt$EN)
	  ramA_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      ramA_serverAdapterA_cnt$D_IN;
	if (ramA_serverAdapterA_s1$EN)
	  ramA_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      ramA_serverAdapterA_s1$D_IN;
	if (ramA_serverAdapterB_cnt$EN)
	  ramA_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      ramA_serverAdapterB_cnt$D_IN;
	if (ramA_serverAdapterB_s1$EN)
	  ramA_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      ramA_serverAdapterB_s1$D_IN;
	if (ramB_serverAdapterA_cnt$EN)
	  ramB_serverAdapterA_cnt <= `BSV_ASSIGNMENT_DELAY
	      ramB_serverAdapterA_cnt$D_IN;
	if (ramB_serverAdapterA_s1$EN)
	  ramB_serverAdapterA_s1 <= `BSV_ASSIGNMENT_DELAY
	      ramB_serverAdapterA_s1$D_IN;
	if (ramB_serverAdapterB_cnt$EN)
	  ramB_serverAdapterB_cnt <= `BSV_ASSIGNMENT_DELAY
	      ramB_serverAdapterB_cnt$D_IN;
	if (ramB_serverAdapterB_s1$EN)
	  ramB_serverAdapterB_s1 <= `BSV_ASSIGNMENT_DELAY
	      ramB_serverAdapterB_s1$D_IN;
	if (valor$EN) valor <= `BSV_ASSIGNMENT_DELAY valor$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    current_addr = 11'h2AA;
    ramA_serverAdapterA_cnt = 3'h2;
    ramA_serverAdapterA_s1 = 2'h2;
    ramA_serverAdapterB_cnt = 3'h2;
    ramA_serverAdapterB_s1 = 2'h2;
    ramB_serverAdapterA_cnt = 3'h2;
    ramB_serverAdapterA_s1 = 2'h2;
    ramB_serverAdapterB_cnt = 3'h2;
    ramB_serverAdapterB_s1 = 2'h2;
    valor = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N)
      if (ramB_serverAdapterB_s1[1] &&
	  !ramB_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (ramB_serverAdapterA_s1[1] &&
	  !ramB_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (ramA_serverAdapterB_s1[1] &&
	  !ramA_serverAdapterB_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
    if (RST_N)
      if (ramA_serverAdapterA_s1[1] &&
	  !ramA_serverAdapterA_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkInnerProduct

